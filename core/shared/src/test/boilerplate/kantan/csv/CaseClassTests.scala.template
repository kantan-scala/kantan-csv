/*
 * Copyright 2015 Nicolas Rinaudo
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package kantan.csv

import kantan.csv.laws.{IllegalRow, LegalRow}
import kantan.csv.laws.discipline.{DisciplineSuite, RowCodecTests}
import kantan.csv.laws.discipline.arbitrary._
import org.scalacheck.{Arbitrary, Cogen}
import org.scalacheck.Arbitrary.{arbitrary => arb}

object Instances {
  implicit val arbCaseClass1: Arbitrary[CaseClass1]  = Arbitrary(arb[Int].map(CaseClass1.apply))
  implicit val caseClass1codec: RowCodec[CaseClass1] = RowCodec.caseCodec(CaseClass1.apply)(CaseClass1.unapply)
  implicit val caseClass1HeaderDecoder: HeaderDecoder[CaseClass1] = HeaderDecoder.decoder("f1")(CaseClass1.apply)
  implicit val cogenCaseClass1: Cogen[CaseClass1]    = Cogen.cogenInt.contramap(_.f1)
  implicit val arbLegalCaseClass1: Arbitrary[LegalRow[CaseClass1]] = arbLegalValueFromEnc[Seq[String], CaseClass1, kantan.csv.codecs.type]
  implicit val arbIllegalCaseClass1: Arbitrary[IllegalRow[CaseClass1]] = arbIllegalValueFromDec[Seq[String], CaseClass1, kantan.csv.codecs.type]
  case class CaseClass1(f1: Int)

  [2..#implicit val arbCaseClass1: Arbitrary[CaseClass1]  = Arbitrary(arb[Tuple1[[#Int#]]].map(CaseClass1.apply.tupled))
  implicit val caseClass1codec: RowCodec[CaseClass1] = RowCodec.caseCodec([#0#])(CaseClass1.apply)(CaseClass1.unapply)
  implicit val caseClass1HeaderDecoder: HeaderDecoder[CaseClass1] = HeaderDecoder.decoder([#"f1"#])(CaseClass1.apply)
  implicit val cogenCaseClass1: Cogen[CaseClass1]    = Cogen.cogenList[Int].contramap(f => List([#f.f1#]))
  implicit val arbLegalCaseClass1: Arbitrary[LegalRow[CaseClass1]] = arbLegalValueFromEnc[Seq[String], CaseClass1, kantan.csv.codecs.type]
  implicit val arbIllegalCaseClass1: Arbitrary[IllegalRow[CaseClass1]] = arbIllegalValueFromDec[Seq[String], CaseClass1, kantan.csv.codecs.type]
  case class CaseClass1([#f1: Int#])#

  ]
}

class CaseClassTests extends DisciplineSuite {
  import Instances._
  [#checkAll("RowCodec[CaseClass1]", RowCodecTests[CaseClass1].codec[List[String], List[Float]])

  // Currently disabled because sbt-boilerplate doesn't support platform specific source directories.
  // checkAll("RowDecoder[CaseClass1]", SerializableTests[RowDecoder[CaseClass1]].serializable)
  // checkAll("RowEncoder[CaseClass1]", SerializableTests[RowEncoder[CaseClass1]].serializable)
  // checkAll("HeaderDecoder[CaseClass1]", SerializableTests[HeaderDecoder[CaseClass1]].serializable)
  #
  ]
}
